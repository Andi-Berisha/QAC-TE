"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getView;

var browser = _interopRequireWildcard(require("./browser"));

var _best = _interopRequireDefault(require("./util/best"));

function getView(dir, scrollable, itemContainer, scrollingTo) {
  var rtl = dir === 'rtl';

  if (itemContainer && scrollable) {
    var scrollLeft = scrollingTo || scrollable.scrollLeft;
    var trueScrollLeft = rtl ? browser.chrome ? scrollLeft - (scrollable.scrollWidth - scrollable.offsetWidth) : browser.edgeUWP || browser.internetExplorer ? -scrollLeft : scrollLeft : scrollLeft;
    var items = itemContainer.children; // This will enumerate <li> inside <FilmStrip>

    var scrollCenter = trueScrollLeft + scrollable.offsetWidth / 2;
    var index = (0, _best.default)([].slice.call(items), function (item) {
      var offsetCenter = item.offsetLeft + item.offsetWidth / 2;
      return 1 / Math.abs(scrollCenter - offsetCenter);
    });

    if (~index) {
      var item = items[index];
      var offsetCenter = item.offsetLeft + item.offsetWidth / 2;
      var indexFraction = index + (scrollCenter - offsetCenter) / item.offsetWidth * (rtl ? -1 : 1); // We "fix" indexFraction if the viewport is at the start/end of the content
      // This is to simplify code that use Math.round(indexFraction) to find the scrollable index
      // if (scrollLeft === 0) {
      //   indexFraction = 0;
      // } else if (scrollLeft >= scrollable.scrollWidth - scrollable.offsetWidth) {
      //   indexFraction = items.length - 1;
      // } else if (indexFraction % 1 > .99 || indexFraction % 1 < .01) {
      //   indexFraction = Math.round(indexFraction);
      // }

      if (indexFraction % 1 > 0.99 || indexFraction % 1 < 0.01) {
        indexFraction = Math.round(indexFraction);
      }

      var selectedIndex;

      if (Math.abs(trueScrollLeft) < 1) {
        selectedIndex = 0;
      } else if (rtl ? trueScrollLeft <= scrollable.offsetWidth - scrollable.scrollWidth : trueScrollLeft >= scrollable.scrollWidth - scrollable.offsetWidth) {
        selectedIndex = items.length - 1;
      } else {
        selectedIndex = Math.round(indexFraction);
      }

      return {
        index: selectedIndex,
        indexFraction: indexFraction
      };
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nZXRWaWV3LmpzIl0sIm5hbWVzIjpbImdldFZpZXciLCJkaXIiLCJzY3JvbGxhYmxlIiwiaXRlbUNvbnRhaW5lciIsInNjcm9sbGluZ1RvIiwicnRsIiwic2Nyb2xsTGVmdCIsInRydWVTY3JvbGxMZWZ0IiwiYnJvd3NlciIsImNocm9tZSIsInNjcm9sbFdpZHRoIiwib2Zmc2V0V2lkdGgiLCJlZGdlVVdQIiwiaW50ZXJuZXRFeHBsb3JlciIsIml0ZW1zIiwiY2hpbGRyZW4iLCJzY3JvbGxDZW50ZXIiLCJpbmRleCIsInNsaWNlIiwiY2FsbCIsIml0ZW0iLCJvZmZzZXRDZW50ZXIiLCJvZmZzZXRMZWZ0IiwiTWF0aCIsImFicyIsImluZGV4RnJhY3Rpb24iLCJyb3VuZCIsInNlbGVjdGVkSW5kZXgiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRWUsU0FBU0EsT0FBVCxDQUFpQkMsR0FBakIsRUFBc0JDLFVBQXRCLEVBQWtDQyxhQUFsQyxFQUFpREMsV0FBakQsRUFBOEQ7QUFDM0UsTUFBTUMsR0FBRyxHQUFHSixHQUFHLEtBQUssS0FBcEI7O0FBRUEsTUFBSUUsYUFBYSxJQUFJRCxVQUFyQixFQUFpQztBQUMvQixRQUFNSSxVQUFVLEdBQUdGLFdBQVcsSUFBSUYsVUFBVSxDQUFDSSxVQUE3QztBQUNBLFFBQU1DLGNBQWMsR0FBR0YsR0FBRyxHQUN0QkcsT0FBTyxDQUFDQyxNQUFSLEdBQ0VILFVBQVUsSUFBSUosVUFBVSxDQUFDUSxXQUFYLEdBQXlCUixVQUFVLENBQUNTLFdBQXhDLENBRFosR0FFRUgsT0FBTyxDQUFDSSxPQUFSLElBQW1CSixPQUFPLENBQUNLLGdCQUEzQixHQUNBLENBQUNQLFVBREQsR0FFQUEsVUFMb0IsR0FNdEJBLFVBTko7QUFPQSxRQUFNUSxLQUFLLEdBQUdYLGFBQWEsQ0FBQ1ksUUFBNUIsQ0FUK0IsQ0FTTzs7QUFDdEMsUUFBTUMsWUFBWSxHQUFHVCxjQUFjLEdBQUdMLFVBQVUsQ0FBQ1MsV0FBWCxHQUF5QixDQUEvRDtBQUNBLFFBQU1NLEtBQUssR0FBRyxtQkFBSyxHQUFHQyxLQUFILENBQVNDLElBQVQsQ0FBY0wsS0FBZCxDQUFMLEVBQTJCLFVBQUFNLElBQUksRUFBSTtBQUMvQyxVQUFNQyxZQUFZLEdBQUdELElBQUksQ0FBQ0UsVUFBTCxHQUFrQkYsSUFBSSxDQUFDVCxXQUFMLEdBQW1CLENBQTFEO0FBRUEsYUFBTyxJQUFJWSxJQUFJLENBQUNDLEdBQUwsQ0FBU1IsWUFBWSxHQUFHSyxZQUF4QixDQUFYO0FBQ0QsS0FKYSxDQUFkOztBQU1BLFFBQUksQ0FBQ0osS0FBTCxFQUFZO0FBQ1YsVUFBTUcsSUFBSSxHQUFHTixLQUFLLENBQUNHLEtBQUQsQ0FBbEI7QUFFQSxVQUFNSSxZQUFZLEdBQUdELElBQUksQ0FBQ0UsVUFBTCxHQUFrQkYsSUFBSSxDQUFDVCxXQUFMLEdBQW1CLENBQTFEO0FBQ0EsVUFBSWMsYUFBYSxHQUFHUixLQUFLLEdBQUksQ0FBQ0QsWUFBWSxHQUFHSyxZQUFoQixJQUFnQ0QsSUFBSSxDQUFDVCxXQUF0QyxJQUFzRE4sR0FBRyxHQUFHLENBQUMsQ0FBSixHQUFRLENBQWpFLENBQTVCLENBSlUsQ0FNVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsVUFBSW9CLGFBQWEsR0FBRyxDQUFoQixHQUFvQixJQUFwQixJQUE0QkEsYUFBYSxHQUFHLENBQWhCLEdBQW9CLElBQXBELEVBQTBEO0FBQ3hEQSxRQUFBQSxhQUFhLEdBQUdGLElBQUksQ0FBQ0csS0FBTCxDQUFXRCxhQUFYLENBQWhCO0FBQ0Q7O0FBRUQsVUFBSUUsYUFBSjs7QUFFQSxVQUFJSixJQUFJLENBQUNDLEdBQUwsQ0FBU2pCLGNBQVQsSUFBMkIsQ0FBL0IsRUFBa0M7QUFDaENvQixRQUFBQSxhQUFhLEdBQUcsQ0FBaEI7QUFDRCxPQUZELE1BRU8sSUFDTHRCLEdBQUcsR0FDQ0UsY0FBYyxJQUFJTCxVQUFVLENBQUNTLFdBQVgsR0FBeUJULFVBQVUsQ0FBQ1EsV0FEdkQsR0FFQ0gsY0FBYyxJQUFJTCxVQUFVLENBQUNRLFdBQVgsR0FBeUJSLFVBQVUsQ0FBQ1MsV0FIckQsRUFJTDtBQUNBZ0IsUUFBQUEsYUFBYSxHQUFHYixLQUFLLENBQUNjLE1BQU4sR0FBZSxDQUEvQjtBQUNELE9BTk0sTUFNQTtBQUNMRCxRQUFBQSxhQUFhLEdBQUdKLElBQUksQ0FBQ0csS0FBTCxDQUFXRCxhQUFYLENBQWhCO0FBQ0Q7O0FBRUQsYUFBTztBQUNMUixRQUFBQSxLQUFLLEVBQUVVLGFBREY7QUFFTEYsUUFBQUEsYUFBYSxFQUFiQTtBQUZLLE9BQVA7QUFJRDtBQUNGO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBicm93c2VyIGZyb20gJy4vYnJvd3Nlcic7XG5pbXBvcnQgYmVzdCBmcm9tICcuL3V0aWwvYmVzdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZpZXcoZGlyLCBzY3JvbGxhYmxlLCBpdGVtQ29udGFpbmVyLCBzY3JvbGxpbmdUbykge1xuICBjb25zdCBydGwgPSBkaXIgPT09ICdydGwnO1xuXG4gIGlmIChpdGVtQ29udGFpbmVyICYmIHNjcm9sbGFibGUpIHtcbiAgICBjb25zdCBzY3JvbGxMZWZ0ID0gc2Nyb2xsaW5nVG8gfHwgc2Nyb2xsYWJsZS5zY3JvbGxMZWZ0O1xuICAgIGNvbnN0IHRydWVTY3JvbGxMZWZ0ID0gcnRsXG4gICAgICA/IGJyb3dzZXIuY2hyb21lXG4gICAgICAgID8gc2Nyb2xsTGVmdCAtIChzY3JvbGxhYmxlLnNjcm9sbFdpZHRoIC0gc2Nyb2xsYWJsZS5vZmZzZXRXaWR0aClcbiAgICAgICAgOiBicm93c2VyLmVkZ2VVV1AgfHwgYnJvd3Nlci5pbnRlcm5ldEV4cGxvcmVyXG4gICAgICAgID8gLXNjcm9sbExlZnRcbiAgICAgICAgOiBzY3JvbGxMZWZ0XG4gICAgICA6IHNjcm9sbExlZnQ7XG4gICAgY29uc3QgaXRlbXMgPSBpdGVtQ29udGFpbmVyLmNoaWxkcmVuOyAvLyBUaGlzIHdpbGwgZW51bWVyYXRlIDxsaT4gaW5zaWRlIDxGaWxtU3RyaXA+XG4gICAgY29uc3Qgc2Nyb2xsQ2VudGVyID0gdHJ1ZVNjcm9sbExlZnQgKyBzY3JvbGxhYmxlLm9mZnNldFdpZHRoIC8gMjtcbiAgICBjb25zdCBpbmRleCA9IGJlc3QoW10uc2xpY2UuY2FsbChpdGVtcyksIGl0ZW0gPT4ge1xuICAgICAgY29uc3Qgb2Zmc2V0Q2VudGVyID0gaXRlbS5vZmZzZXRMZWZ0ICsgaXRlbS5vZmZzZXRXaWR0aCAvIDI7XG5cbiAgICAgIHJldHVybiAxIC8gTWF0aC5hYnMoc2Nyb2xsQ2VudGVyIC0gb2Zmc2V0Q2VudGVyKTtcbiAgICB9KTtcblxuICAgIGlmICh+aW5kZXgpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpbmRleF07XG5cbiAgICAgIGNvbnN0IG9mZnNldENlbnRlciA9IGl0ZW0ub2Zmc2V0TGVmdCArIGl0ZW0ub2Zmc2V0V2lkdGggLyAyO1xuICAgICAgbGV0IGluZGV4RnJhY3Rpb24gPSBpbmRleCArICgoc2Nyb2xsQ2VudGVyIC0gb2Zmc2V0Q2VudGVyKSAvIGl0ZW0ub2Zmc2V0V2lkdGgpICogKHJ0bCA/IC0xIDogMSk7XG5cbiAgICAgIC8vIFdlIFwiZml4XCIgaW5kZXhGcmFjdGlvbiBpZiB0aGUgdmlld3BvcnQgaXMgYXQgdGhlIHN0YXJ0L2VuZCBvZiB0aGUgY29udGVudFxuICAgICAgLy8gVGhpcyBpcyB0byBzaW1wbGlmeSBjb2RlIHRoYXQgdXNlIE1hdGgucm91bmQoaW5kZXhGcmFjdGlvbikgdG8gZmluZCB0aGUgc2Nyb2xsYWJsZSBpbmRleFxuICAgICAgLy8gaWYgKHNjcm9sbExlZnQgPT09IDApIHtcbiAgICAgIC8vICAgaW5kZXhGcmFjdGlvbiA9IDA7XG4gICAgICAvLyB9IGVsc2UgaWYgKHNjcm9sbExlZnQgPj0gc2Nyb2xsYWJsZS5zY3JvbGxXaWR0aCAtIHNjcm9sbGFibGUub2Zmc2V0V2lkdGgpIHtcbiAgICAgIC8vICAgaW5kZXhGcmFjdGlvbiA9IGl0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICAvLyB9IGVsc2UgaWYgKGluZGV4RnJhY3Rpb24gJSAxID4gLjk5IHx8IGluZGV4RnJhY3Rpb24gJSAxIDwgLjAxKSB7XG4gICAgICAvLyAgIGluZGV4RnJhY3Rpb24gPSBNYXRoLnJvdW5kKGluZGV4RnJhY3Rpb24pO1xuICAgICAgLy8gfVxuXG4gICAgICBpZiAoaW5kZXhGcmFjdGlvbiAlIDEgPiAwLjk5IHx8IGluZGV4RnJhY3Rpb24gJSAxIDwgMC4wMSkge1xuICAgICAgICBpbmRleEZyYWN0aW9uID0gTWF0aC5yb3VuZChpbmRleEZyYWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHNlbGVjdGVkSW5kZXg7XG5cbiAgICAgIGlmIChNYXRoLmFicyh0cnVlU2Nyb2xsTGVmdCkgPCAxKSB7XG4gICAgICAgIHNlbGVjdGVkSW5kZXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcnRsXG4gICAgICAgICAgPyB0cnVlU2Nyb2xsTGVmdCA8PSBzY3JvbGxhYmxlLm9mZnNldFdpZHRoIC0gc2Nyb2xsYWJsZS5zY3JvbGxXaWR0aFxuICAgICAgICAgIDogdHJ1ZVNjcm9sbExlZnQgPj0gc2Nyb2xsYWJsZS5zY3JvbGxXaWR0aCAtIHNjcm9sbGFibGUub2Zmc2V0V2lkdGhcbiAgICAgICkge1xuICAgICAgICBzZWxlY3RlZEluZGV4ID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGVkSW5kZXggPSBNYXRoLnJvdW5kKGluZGV4RnJhY3Rpb24pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbmRleDogc2VsZWN0ZWRJbmRleCxcbiAgICAgICAgaW5kZXhGcmFjdGlvblxuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==