"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _BasicFilm = _interopRequireDefault(require("./BasicFilm"));

var _Composer = _interopRequireDefault(require("./Composer"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ReactFilm = function ReactFilm(_ref) {
  var autoCenter = _ref.autoCenter,
      autoHide = _ref.autoHide,
      autoHideFlipperOnEdge = _ref.autoHideFlipperOnEdge,
      children = _ref.children,
      className = _ref.className,
      dir = _ref.dir,
      flipperBlurFocusOnClick = _ref.flipperBlurFocusOnClick,
      height = _ref.height,
      leftFlipperText = _ref.leftFlipperText,
      nonce = _ref.nonce,
      rightFlipperText = _ref.rightFlipperText,
      showDots = _ref.showDots,
      showFlipper = _ref.showFlipper,
      showScrollBar = _ref.showScrollBar,
      styleSet = _ref.styleSet;
  var styleOptions = (0, _react.useMemo)(function () {
    return {
      autoCenter: autoCenter,
      autoHide: autoHide,
      autoHideFlipperOnEdge: autoHideFlipperOnEdge,
      dir: dir,
      leftFlipperText: leftFlipperText,
      flipperBlurFocusOnClick: flipperBlurFocusOnClick,
      rightFlipperText: rightFlipperText,
      showDots: showDots,
      showFlipper: showFlipper,
      showScrollBar: showScrollBar
    };
  }, [autoCenter, autoHide, autoHideFlipperOnEdge, dir, leftFlipperText, flipperBlurFocusOnClick, rightFlipperText, showDots, showFlipper, showScrollBar]);
  return /*#__PURE__*/_react.default.createElement(_Composer.default, {
    dir: dir,
    height: height,
    nonce: nonce,
    numItems: children ? _react.Children.count(children) : 0,
    styleOptions: styleOptions,
    styleSet: styleSet
  }, /*#__PURE__*/_react.default.createElement(_BasicFilm.default, {
    className: className
  }, children));
};

ReactFilm.defaultProps = _objectSpread(_objectSpread({}, _BasicFilm.default.defaultProps), {}, {
  autoCenter: undefined,
  autoHide: undefined,
  autoHideFlipperOnEdge: undefined,
  children: undefined,
  className: undefined,
  dir: undefined,
  flipperBlurFocusOnClick: undefined,
  leftFlipperText: undefined,
  nonce: undefined,
  rightFlipperText: undefined,
  showDots: undefined,
  showFlipper: undefined,
  showScrollBar: undefined,
  styleSet: undefined
});
ReactFilm.propTypes = _objectSpread(_objectSpread({}, _BasicFilm.default.propTypes), {}, {
  autoCenter: _propTypes.default.bool,
  autoHide: _propTypes.default.bool,
  autoHideFlipperOnEdge: _propTypes.default.bool,
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  dir: _propTypes.default.oneOf(['auto', 'ltr', 'rtl']),
  flipperBlurFocusOnClick: _propTypes.default.bool,
  height: _propTypes.default.number,
  leftFlipperText: _propTypes.default.string,
  nonce: _propTypes.default.string,
  rightFlipperText: _propTypes.default.string,
  showDots: _propTypes.default.bool,
  showFlipper: _propTypes.default.bool,
  showScrollBar: _propTypes.default.bool,
  styleSet: _propTypes.default.any
});
var _default = ReactFilm;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9SZWFjdEZpbG0uanMiXSwibmFtZXMiOlsiUmVhY3RGaWxtIiwiYXV0b0NlbnRlciIsImF1dG9IaWRlIiwiYXV0b0hpZGVGbGlwcGVyT25FZGdlIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJkaXIiLCJmbGlwcGVyQmx1ckZvY3VzT25DbGljayIsImhlaWdodCIsImxlZnRGbGlwcGVyVGV4dCIsIm5vbmNlIiwicmlnaHRGbGlwcGVyVGV4dCIsInNob3dEb3RzIiwic2hvd0ZsaXBwZXIiLCJzaG93U2Nyb2xsQmFyIiwic3R5bGVTZXQiLCJzdHlsZU9wdGlvbnMiLCJDaGlsZHJlbiIsImNvdW50IiwiZGVmYXVsdFByb3BzIiwiQmFzaWNGaWxtIiwidW5kZWZpbmVkIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYm9vbCIsImFueSIsInN0cmluZyIsIm9uZU9mIiwibnVtYmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLFNBQVMsR0FBRyxTQUFaQSxTQUFZLE9BZ0JaO0FBQUEsTUFmSkMsVUFlSSxRQWZKQSxVQWVJO0FBQUEsTUFkSkMsUUFjSSxRQWRKQSxRQWNJO0FBQUEsTUFiSkMscUJBYUksUUFiSkEscUJBYUk7QUFBQSxNQVpKQyxRQVlJLFFBWkpBLFFBWUk7QUFBQSxNQVhKQyxTQVdJLFFBWEpBLFNBV0k7QUFBQSxNQVZKQyxHQVVJLFFBVkpBLEdBVUk7QUFBQSxNQVRKQyx1QkFTSSxRQVRKQSx1QkFTSTtBQUFBLE1BUkpDLE1BUUksUUFSSkEsTUFRSTtBQUFBLE1BUEpDLGVBT0ksUUFQSkEsZUFPSTtBQUFBLE1BTkpDLEtBTUksUUFOSkEsS0FNSTtBQUFBLE1BTEpDLGdCQUtJLFFBTEpBLGdCQUtJO0FBQUEsTUFKSkMsUUFJSSxRQUpKQSxRQUlJO0FBQUEsTUFISkMsV0FHSSxRQUhKQSxXQUdJO0FBQUEsTUFGSkMsYUFFSSxRQUZKQSxhQUVJO0FBQUEsTUFESkMs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dEI7QUFjRVgsRUFBQUEsV0FBVyxFQUFFVSxtQkFBVUMsSUFkekI7QUFlRVYsRUFBQUEsYUFBYSxFQUFFUyxtQkFBVUMsSUFmM0I7QUFnQkVULEVBQUFBLFFBQVEsRUFBRVEsbUJBQVVFO0FBaEJ0QjtlQW1CZXpCLFMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQmFzaWNGaWxtIGZyb20gJy4vQmFzaWNGaWxtJztcbmltcG9ydCBDb21wb3NlciBmcm9tICcuL0NvbXBvc2VyJztcblxuY29uc3QgUmVhY3RGaWxtID0gKHtcbiAgYXV0b0NlbnRlcixcbiAgYXV0b0hpZGUsXG4gIGF1dG9IaWRlRmxpcHBlck9uRWRnZSxcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgZGlyLFxuICBmbGlwcGVyQmx1ckZvY3VzT25DbGljayxcbiAgaGVpZ2h0LFxuICBsZWZ0RmxpcHBlclRleHQsXG4gIG5vbmNlLFxuICByaWdodEZsaXBwZXJUZXh0LFxuICBzaG93RG90cyxcbiAgc2hvd0ZsaXBwZXIsXG4gIHNob3dTY3JvbGxCYXIsXG4gIHN0eWxlU2V0XG59KSA9PiB7XG4gIGNvbnN0IHN0eWxlT3B0aW9ucyA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIGF1dG9DZW50ZXIsXG4gICAgICBhdXRvSGlkZSxcbiAgICAgIGF1dG9IaWRlRmxpcHBlck9uRWRnZSxcbiAgICAgIGRpcixcbiAgICAgIGxlZnRGbGlwcGVyVGV4dCxcbiAgICAgIGZsaXBwZXJCbHVyRm9jdXNPbkNsaWNrLFxuICAgICAgcmlnaHRGbGlwcGVyVGV4dCxcbiAgICAgIHNob3dEb3RzLFxuICAgICAgc2hvd0ZsaXBwZXIsXG4gICAgICBzaG93U2Nyb2xsQmFyXG4gICAgfSksXG4gICAgW1xuICAgICAgYXV0b0NlbnRlcixcbiAgICAgIGF1dG9IaWRlLFxuICAgICAgYXV0b0hpZGVGbGlwcGVyT25FZGdlLFxuICAgICAgZGlyLFxuICAgICAgbGVmdEZsaXBwZXJUZXh0LFxuICAgICAgZmxpcHBlckJsdXJGb2N1c09uQ2xpY2ssXG4gICAgICByaWdodEZsaXBwZXJUZXh0LFxuICAgICAgc2hvd0RvdHMsXG4gICAgICBzaG93RmxpcHBlcixcbiAgICAgIHNob3dTY3JvbGxCYXJcbiAgICBdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8Q29tcG9zZXJcbiAgICAgIGRpcj17ZGlyfVxuICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICBub25jZT17bm9uY2V9XG4gICAgICBudW1JdGVtcz17Y2hpbGRyZW4gPyBDaGlsZHJlbi5jb3VudChjaGlsZHJlbikgOiAwfVxuICAgICAgc3R5bGVPcHRpb25zPXtzdHlsZU9wdGlvbnN9XG4gICAgICBzdHlsZVNldD17c3R5bGVTZXR9XG4gICAgPlxuICAgICAgPEJhc2ljRmlsbSBjbGFzc05hbWU9e2NsYXNzTmFtZX0+e2NoaWxkcmVufTwvQmFzaWNGaWxtPlxuICAgIDwvQ29tcG9zZXI+XG4gICk7XG59O1xuXG5SZWFjdEZpbG0uZGVmYXVsdFByb3BzID0ge1xuICAuLi5CYXNpY0ZpbG0uZGVmYXVsdFByb3BzLFxuICBhdXRvQ2VudGVyOiB1bmRlZmluZWQsXG4gIGF1dG9IaWRlOiB1bmRlZmluZWQsXG4gIGF1dG9IaWRlRmxpcHBlck9uRWRnZTogdW5kZWZpbmVkLFxuICBjaGlsZHJlbjogdW5kZWZpbmVkLFxuICBjbGFzc05hbWU6IHVuZGVmaW5lZCxcbiAgZGlyOiB1bmRlZmluZWQsXG4gIGZsaXBwZXJCbHVyRm9jdXNPbkNsaWNrOiB1bmRlZmluZWQsXG4gIGxlZnRGbGlwcGVyVGV4dDogdW5kZWZpbmVkLFxuICBub25jZTogdW5kZWZpbmVkLFxuICByaWdodEZsaXBwZXJUZXh0OiB1bmRlZmluZWQsXG4gIHNob3dEb3RzOiB1bmRlZmluZWQsXG4gIHNob3dGbGlwcGVyOiB1bmRlZmluZWQsXG4gIHNob3dTY3JvbGxCYXI6IHVuZGVmaW5lZCxcbiAgc3R5bGVTZXQ6IHVuZGVmaW5lZFxufTtcblxuUmVhY3RGaWxtLnByb3BUeXBlcyA9IHtcbiAgLi4uQmFzaWNGaWxtLnByb3BUeXBlcyxcbiAgYXV0b0NlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIGF1dG9IaWRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgYXV0b0hpZGVGbGlwcGVyT25FZGdlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGlyOiBQcm9wVHlwZXMub25lT2YoWydhdXRvJywgJ2x0cicsICdydGwnXSksXG4gIGZsaXBwZXJCbHVyRm9jdXNPbkNsaWNrOiBQcm9wVHlwZXMuYm9vbCxcbiAgaGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLFxuICBsZWZ0RmxpcHBlclRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG5vbmNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICByaWdodEZsaXBwZXJUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzaG93RG90czogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dGbGlwcGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvd1Njcm9sbEJhcjogUHJvcFR5cGVzLmJvb2wsXG4gIHN0eWxlU2V0OiBQcm9wVHlwZXMuYW55XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdEZpbG07XG4iXX0=