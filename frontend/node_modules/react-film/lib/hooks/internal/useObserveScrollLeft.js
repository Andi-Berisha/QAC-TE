"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useObserveScrollLeft;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = require("react");

var _memoizeOne = _interopRequireDefault(require("memoize-one"));

var _debounce = _interopRequireDefault(require("../../util/debounce"));

function sleepZero() {
  return new Promise(function (resolve) {
    return setTimeout(function () {
      return resolve();
    });
  });
}

function useObserveScrollLeft(callbackRefWithSubscribe, observer) {
  (0, _react.useEffect)(function () {
    return callbackRefWithSubscribe.subscribe(function (current) {
      if (!current) {
        return;
      }

      var memoizedEmitValue = (0, _memoizeOne.default)(function (initial, fraction, width) {
        return observer && observer({
          initial: initial,
          fraction: fraction,
          width: width
        });
      });

      var emitValue = function emitValue(initial) {
        var offsetWidth = current.offsetWidth,
            scrollLeft = current.scrollLeft,
            scrollWidth = current.scrollWidth;
        memoizedEmitValue(initial, "".concat(scrollWidth === offsetWidth ? 0 : scrollLeft / (scrollWidth - offsetWidth) * 100, "%"), "".concat(offsetWidth / scrollWidth * 100, "%"));
      };

      var handleScroll = function handleScroll() {
        return emitValue(false);
      };

      var handlePointerOver = (0, _debounce.default)(function () {
        // We need to send "onScroll" because "scrollWidth" might have changed
        // For example, the container resized, the scroll width will be incorrect
        // We will debounce to prevent "pointerOver" calculating too often
        // We will memoize to prevent firing unnecessary "onScroll"
        emitValue(false);
      });
      current.addEventListener('pointerover', handlePointerOver, {
        passive: true
      });
      current.addEventListener('scroll', handleScroll, {
        passive: true
      });
      (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(current.scrollWidth === current.offsetWidth)) {
                  _context.next = 3;
                  break;
                }

                _context.next = 3;
                return sleepZero();

              case 3:
                emitValue(true);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
      return function () {
        current.removeEventListener('pointerover', handlePointerOver);
        current.removeEventListener('scroll', handleScroll);
      };
    });
  }, [callbackRefWithSubscribe, observer]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9pbnRlcm5hbC91c2VPYnNlcnZlU2Nyb2xsTGVmdC5qcyJdLCJuYW1lcyI6WyJzbGVlcFplcm8iLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJ1c2VPYnNlcnZlU2Nyb2xsTGVmdCIsImNhbGxiYWNrUmVmV2l0aFN1YnNjcmliZSIsIm9ic2VydmVyIiwic3Vic2NyaWJlIiwiY3VycmVudCIsIm1lbW9pemVkRW1pdFZhbHVlIiwiaW5pdGlhbCIsImZyYWN0aW9uIiwid2lkdGgiLCJlbWl0VmFsdWUiLCJvZmZzZXRXaWR0aCIsInNjcm9sbExlZnQiLCJzY3JvbGxXaWR0aCIsImhhbmRsZVNjcm9sbCIsImhhbmRsZVBvaW50ZXJPdmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBRUEsU0FBU0EsU0FBVCxHQUFxQjtBQUNuQixTQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFBQyxPQUFPO0FBQUEsV0FBSUMsVUFBVSxDQUFDO0FBQUEsYUFBTUQsT0FBTyxFQUFiO0FBQUEsS0FBRCxDQUFkO0FBQUEsR0FBbkIsQ0FBUDtBQUNEOztBQUVjLFNBQVNFLG9CQUFULENBQThCQyx3QkFBOUIsRUFBd0RDLFFBQXhELEVBQWtFO0FBQy9FLHdCQUNFO0FBQUEsV0FDRUQsd0JBQXdCLENBQUNFLFNBQXpCLENBQW1DLFVBQUFDLE9BQU8sRUFBSTtBQUM1QyxVQUFJLENBQUNBLE9BQUwsRUFBYztBQUNaO0FBQ0Q7O0FBRUQsVUFBTUMsaUJBQWlCLEdBQUcseUJBQ3hCLFVBQUNDLE9BQUQsRUFBVUMsUUFBVixFQUFvQkMsS0FBcEI7QUFBQSxlQUE4Qk4sUUFBUSxJQUFJQSxRQUFRLENBQUM7QUFBRUksVUFBQUEsT0FBTyxFQUFQQSxPQUFGO0FBQVdDLFVBQUFBLFFBQVEsRUFBUkEsUUFBWDtBQUFxQkMsVUFBQUEsS0FBSyxFQUFMQTtBQUFyQixTQUFELENBQWxEO0FBQUEsT0FEd0IsQ0FBMUI7O0FBSUEsVUFBTUMsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBQUgsT0FBTyxFQUFJO0FBQUEsWUFDbkJJLFdBRG1CLEdBQ3NCTixPQUR0QixDQUNuQk0sV0FEbUI7QUFBQSxZQUNOQyxVQURNLEdBQ3NCUCxPQUR0QixDQUNOTyxVQURNO0FBQUEsWUFDTUMsV0FETixHQUNzQlIsT0FEdEIsQ0FDTVEsV0FETjtBQUczQlAsUUFBQUEsaUJBQWlCLENBQ2ZDLE9BRGUsWUFFWk0sV0FBVyxLQUFLRixXQUFoQixHQUE4QixDQUE5QixHQUFtQ0MsVUFBVSxJQUFJQyxXQUFXLEdBQUdGLFdBQWxCLENBQVgsR0FBNkMsR0FGbkUsa0JBR1hBLFdBQVcsR0FBR0UsV0FBZixHQUE4QixHQUhsQixPQUFqQjtBQUtELE9BUkQ7O0FBVUEsVUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQWU7QUFBQSxlQUFNSixTQUFTLENBQUMsS0FBRCxDQUFmO0FBQUEsT0FBckI7O0FBRUEsVUFBTUssaUJBQWlCLEdBQUcsdUJBQVMsWUFBTTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBTCxRQUFBQSxTQUFTLENBQUMsS0FBRCxDQUFUO0FBQ0QsT0FOeUIsQ0FBMUI7QUFRQUwsTUFBQUEsT0FBTyxDQUFDVyxnQkFBUixDQUF5QixhQUF6QixFQUF3Q0QsaUJBQXhDLEVBQTJEO0FBQUVFLFFBQUFBLE9BQU8sRUFBRTtBQUFYLE9BQTNEO0FBQ0FaLE1BQUFBLE9BQU8sQ0FBQ1csZ0JBQVIsQ0FBeUIsUUFBekIsRUFBbUNGLFlBQW5DLEVBQWlEO0FBQUVHLFFBQUFBLE9BQU8sRUFBRTtBQUFYLE9BQWpEO0FBRUEsOEVBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUNLWixPQUFPLENBQUNRLFdBQVIsS0FBd0JSLE9BQU8sQ0FBQ00sV0FEckM7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQSx1QkFHU2QsU0FBUyxFQUhsQjs7QUFBQTtBQU1DYSxnQkFBQUEsU0FBUyxDQUFDLElBQUQsQ0FBVDs7QUFORDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQUFEO0FBU0EsYUFBTyxZQUFNO0FBQ1hMLFFBQUFBLE9BQU8sQ0FBQ2EsbUJBQVIsQ0FBNEIsYUFBNUIsRUFBMkNILGlCQUEzQztBQUNBVixRQUFBQSxPQUFPLENBQUNhLG1CQUFSLENBQTRCLFFBQTVCLEVBQXNDSixZQUF0QztBQUNELE9BSEQ7QUFJRCxLQTdDRCxDQURGO0FBQUEsR0FERixFQWdERSxDQUFDWix3QkFBRCxFQUEyQkMsUUFBM0IsQ0FoREY7QUFrREQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdtZW1vaXplLW9uZSc7XG5cbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi8uLi91dGlsL2RlYm91bmNlJztcblxuZnVuY3Rpb24gc2xlZXBaZXJvKCkge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoKSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VPYnNlcnZlU2Nyb2xsTGVmdChjYWxsYmFja1JlZldpdGhTdWJzY3JpYmUsIG9ic2VydmVyKSB7XG4gIHVzZUVmZmVjdChcbiAgICAoKSA9PlxuICAgICAgY2FsbGJhY2tSZWZXaXRoU3Vic2NyaWJlLnN1YnNjcmliZShjdXJyZW50ID0+IHtcbiAgICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWVtb2l6ZWRFbWl0VmFsdWUgPSBtZW1vaXplKFxuICAgICAgICAgIChpbml0aWFsLCBmcmFjdGlvbiwgd2lkdGgpID0+IG9ic2VydmVyICYmIG9ic2VydmVyKHsgaW5pdGlhbCwgZnJhY3Rpb24sIHdpZHRoIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgZW1pdFZhbHVlID0gaW5pdGlhbCA9PiB7XG4gICAgICAgICAgY29uc3QgeyBvZmZzZXRXaWR0aCwgc2Nyb2xsTGVmdCwgc2Nyb2xsV2lkdGggfSA9IGN1cnJlbnQ7XG5cbiAgICAgICAgICBtZW1vaXplZEVtaXRWYWx1ZShcbiAgICAgICAgICAgIGluaXRpYWwsXG4gICAgICAgICAgICBgJHtzY3JvbGxXaWR0aCA9PT0gb2Zmc2V0V2lkdGggPyAwIDogKHNjcm9sbExlZnQgLyAoc2Nyb2xsV2lkdGggLSBvZmZzZXRXaWR0aCkpICogMTAwfSVgLFxuICAgICAgICAgICAgYCR7KG9mZnNldFdpZHRoIC8gc2Nyb2xsV2lkdGgpICogMTAwfSVgXG4gICAgICAgICAgKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBoYW5kbGVTY3JvbGwgPSAoKSA9PiBlbWl0VmFsdWUoZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVBvaW50ZXJPdmVyID0gZGVib3VuY2UoKCkgPT4ge1xuICAgICAgICAgIC8vIFdlIG5lZWQgdG8gc2VuZCBcIm9uU2Nyb2xsXCIgYmVjYXVzZSBcInNjcm9sbFdpZHRoXCIgbWlnaHQgaGF2ZSBjaGFuZ2VkXG4gICAgICAgICAgLy8gRm9yIGV4YW1wbGUsIHRoZSBjb250YWluZXIgcmVzaXplZCwgdGhlIHNjcm9sbCB3aWR0aCB3aWxsIGJlIGluY29ycmVjdFxuICAgICAgICAgIC8vIFdlIHdpbGwgZGVib3VuY2UgdG8gcHJldmVudCBcInBvaW50ZXJPdmVyXCIgY2FsY3VsYXRpbmcgdG9vIG9mdGVuXG4gICAgICAgICAgLy8gV2Ugd2lsbCBtZW1vaXplIHRvIHByZXZlbnQgZmlyaW5nIHVubmVjZXNzYXJ5IFwib25TY3JvbGxcIlxuICAgICAgICAgIGVtaXRWYWx1ZShmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN1cnJlbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm92ZXInLCBoYW5kbGVQb2ludGVyT3ZlciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICBjdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZVNjcm9sbCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gICAgICAgIChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnQuc2Nyb2xsV2lkdGggPT09IGN1cnJlbnQub2Zmc2V0V2lkdGgpIHtcbiAgICAgICAgICAgIC8vIEhBQ0s6IENocm9tZSA2NiB3aWxsIGluaXRpYWxseSBzYXkgc2Nyb2xsV2lkdGggZXF1YWxzIHRvIG9mZnNldFdpZHRoLCB1bnRpbCBzb21lIHRpbWUgbGF0ZXJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwWmVybygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVtaXRWYWx1ZSh0cnVlKTtcbiAgICAgICAgfSkoKTtcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIGN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm92ZXInLCBoYW5kbGVQb2ludGVyT3Zlcik7XG4gICAgICAgICAgY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBoYW5kbGVTY3JvbGwpO1xuICAgICAgICB9O1xuICAgICAgfSksXG4gICAgW2NhbGxiYWNrUmVmV2l0aFN1YnNjcmliZSwgb2JzZXJ2ZXJdXG4gICk7XG59XG4iXX0=