{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andib\\\\Desktop\\\\QAC-TE\\\\QAC-TE\\\\frontend\\\\src\\\\Pages\\\\BookingsAndPayment\\\\CheckoutForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport axios from \"axios\";\nimport { Link } from 'react-router-dom';\nimport { BOOKINGS_URL } from \"../../Resources/CONSTS.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CARD_OPTIONS = {\n  iconStyle: 'solid',\n  hidePostalCode: true,\n  style: {\n    // base: {\n    //   iconColor: '#c4f0ff',\n    //   fontWeight: 500,\n    //   fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\n    //   fontSize: '16px',\n    //   fontSmoothing: 'antialiased',\n    //   ':-webkit-autofill': {color: '#fce883'},\n    //   '::placeholder': {color: '#87bbfd'},\n    // },\n    invalid: {\n      iconColor: '#ff0000',\n      color: '#ff0000'\n    }\n  }\n};\n\nconst CheckoutForm = ({\n  success,\n  amount,\n  bookingID\n}) => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const updateDatabase = () => {\n    // e.preventDefault();\n    axios.patch(`${BOOKINGS_URL}/update/${bookingID}`, {\n      paid: true\n    }).then(res => {\n      // trigger(res.data);\n      // toggle();\n      console.log(bookingID);\n      console.log('succesfully updated db');\n    }).catch(err => {\n      // trigger(err.data);\n      console.log(err);\n    });\n  };\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n      const {\n        id\n      } = paymentMethod;\n\n      try {\n        const {\n          data\n        } = await axios.post(\"http://localhost:5019/Stripe/charge\", {\n          id,\n          amount: amount\n        });\n        console.log(data);\n        success();\n        updateDatabase(); // return (<Link to={{ pathname: `/` }} style={{ color: 'black' }}></Link>);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      color: 'black',\n      maxWidth: '400px',\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      options: CARD_OPTIONS\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe,\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckoutForm, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["C:/Users/andib/Desktop/QAC-TE/QAC-TE/frontend/src/Pages/BookingsAndPayment/CheckoutForm.jsx"],"names":["CardElement","useStripe","useElements","axios","Link","BOOKINGS_URL","CARD_OPTIONS","iconStyle","hidePostalCode","style","invalid","iconColor","color","CheckoutForm","success","amount","bookingID","stripe","elements","updateDatabase","patch","paid","then","res","console","log","catch","err","handleSubmit","event","preventDefault","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","id","data","post","maxWidth","margin"],"mappings":"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","sourcesContent":["import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\nimport axios from \"axios\";\r\nimport { Link, } from 'react-router-dom';\r\nimport { BOOKINGS_URL } from \"../../Resources/CONSTS.json\";\r\n\r\n\r\nconst CARD_OPTIONS = {\r\n  iconStyle: 'solid',\r\n  hidePostalCode: true,\r\n  style: {\r\n    // base: {\r\n    //   iconColor: '#c4f0ff',\r\n    //   fontWeight: 500,\r\n    //   fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\r\n    //   fontSize: '16px',\r\n    //   fontSmoothing: 'antialiased',\r\n    //   ':-webkit-autofill': {color: '#fce883'},\r\n    //   '::placeholder': {color: '#87bbfd'},\r\n    // },\r\n    invalid: {\r\n      iconColor: '#ff0000',\r\n      color: '#ff0000',\r\n    },\r\n  },\r\n};\r\n\r\n\r\n\r\nconst CheckoutForm = ({ success, amount, bookingID }) => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const updateDatabase = () => {\r\n    // e.preventDefault();\r\n    axios.patch(`${BOOKINGS_URL}/update/${bookingID}`,\r\n        { paid: true })\r\n        .then((res) => {\r\n            // trigger(res.data);\r\n            // toggle();\r\n            console.log(bookingID);\r\n            console.log('succesfully updated db');\r\n        })\r\n        .catch((err)=>{\r\n            // trigger(err.data);\r\n            console.log(err);\r\n        })\r\n  }\r\n\r\n  const handleSubmit = async (event) => {\r\n    // Block native form submission.\r\n    event.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not loaded yet. Make sure to disable\r\n      // form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    // Get a reference to a mounted CardElement. Elements knows how\r\n    // to find your CardElement because there can only ever be one of\r\n    // each type of element.\r\n    const cardElement = elements.getElement(CardElement);\r\n\r\n    // Use your card Element with other Stripe.js APIs\r\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n      type: 'card',\r\n      card: cardElement,\r\n    });\r\n\r\n    if (error) {\r\n      console.log('[error]', error);\r\n    } else {\r\n      console.log('[PaymentMethod]', paymentMethod);\r\n      const { id } = paymentMethod;\r\n\r\n      try {\r\n        const { data } = await axios.post(\"http://localhost:5019/Stripe/charge\", { id, amount: amount });\r\n        console.log(data);\r\n        success();\r\n        updateDatabase();\r\n        // return (<Link to={{ pathname: `/` }} style={{ color: 'black' }}></Link>);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} style={{ color: 'black', maxWidth: '400px', margin: '0 auto' }}>\r\n      {/* <label>Name on credit card:</label><br/> */}\r\n      {/* <input type=\"text\" name=\"name\" /> */}\r\n      <CardElement options={CARD_OPTIONS} />\r\n      <button type=\"submit\" disabled={!stripe}>\r\n        Pay\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;"]},"metadata":{},"sourceType":"module"}