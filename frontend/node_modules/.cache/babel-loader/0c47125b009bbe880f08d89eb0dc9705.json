{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useCallbackRefWithSubscribe;\n\nvar _react = require(\"react\");\n\nvar SUBSCRIBER_LIMIT = 10;\n\nfunction useCallbackRefWithSubscribe() {\n  return (0, _react.useMemo)(function () {\n    var subscriptions = [];\n\n    var callbackRef = function callbackRef(current) {\n      callbackRef.current = current;\n      subscriptions.forEach(function (subscription) {\n        subscription.cleanup && subscription.cleanup();\n        subscription.cleanup = subscription.callback(current);\n      });\n    };\n\n    callbackRef.subscribe = function (callback) {\n      var subscription = {\n        callback: callback\n      };\n      subscriptions.push(subscription);\n\n      if (subscriptions.length >= SUBSCRIBER_LIMIT) {\n        console.warn(\"useSubscribe: Reaching maximum limit of subscribers (\".concat(SUBSCRIBER_LIMIT, \"), please make sure your code did clean up properly.\"));\n      }\n\n      subscription.cleanup = callback(callbackRef.current);\n      return function () {\n        subscription.cleanup && subscription.cleanup();\n        var index = subscriptions.indexOf(subscription);\n        ~index && subscriptions.splice(index, 1);\n      };\n    };\n\n    return callbackRef;\n  }, []);\n}","map":{"version":3,"sources":["../../../src/hooks/internal/useCallbackRefWithSubscribe.js"],"names":["SUBSCRIBER_LIMIT","subscriptions","callbackRef","subscription","callback","console","index"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,IAAMA,gBAAgB,GAAtB,EAAA;;AAEe,SAAA,2BAAA,GAAuC;AACpD,SAAO,CAAA,GAAA,MAAA,CAAA,OAAA,EAAQ,YAAM;AACnB,QAAMC,aAAa,GAAnB,EAAA;;AAEA,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,OAAA,EAAW;AAC7BA,MAAAA,WAAW,CAAXA,OAAAA,GAAAA,OAAAA;AAEAD,MAAAA,aAAa,CAAbA,OAAAA,CAAsB,UAAA,YAAA,EAAgB;AACpCE,QAAAA,YAAY,CAAZA,OAAAA,IAAwBA,YAAY,CAApCA,OAAwBA,EAAxBA;AACAA,QAAAA,YAAY,CAAZA,OAAAA,GAAuBA,YAAY,CAAZA,QAAAA,CAAvBA,OAAuBA,CAAvBA;AAFFF,OAAAA;AAHF,KAAA;;AASAC,IAAAA,WAAW,CAAXA,SAAAA,GAAwB,UAAA,QAAA,EAAY;AAClC,UAAMC,YAAY,GAAG;AAAEC,QAAAA,QAAQ,EAARA;AAAF,OAArB;AAEAH,MAAAA,aAAa,CAAbA,IAAAA,CAAAA,YAAAA;;AAEA,UAAIA,aAAa,CAAbA,MAAAA,IAAJ,gBAAA,EAA8C;AAC5CI,QAAAA,OAAO,CAAPA,IAAAA,CAAAA,wDAAAA,MAAAA,CAAAA,gBAAAA,EAAAA,sDAAAA,CAAAA;AAGD;;AAEDF,MAAAA,YAAY,CAAZA,OAAAA,GAAuBC,QAAQ,CAACF,WAAW,CAA3CC,OAA+B,CAA/BA;AAEA,aAAO,YAAM;AACXA,QAAAA,YAAY,CAAZA,OAAAA,IAAwBA,YAAY,CAApCA,OAAwBA,EAAxBA;AAEA,YAAMG,KAAK,GAAGL,aAAa,CAAbA,OAAAA,CAAd,YAAcA,CAAd;AAEA,SAAA,KAAA,IAAUA,aAAa,CAAbA,MAAAA,CAAAA,KAAAA,EAAV,CAAUA,CAAV;AALF,OAAA;AAbFC,KAAAA;;AAsBA,WAAA,WAAA;AAlCK,GAAA,EAAP,EAAO,CAAP;AAoCD","sourcesContent":["import { useMemo } from 'react';\n\nconst SUBSCRIBER_LIMIT = 10;\n\nexport default function useCallbackRefWithSubscribe() {\n  return useMemo(() => {\n    const subscriptions = [];\n\n    const callbackRef = current => {\n      callbackRef.current = current;\n\n      subscriptions.forEach(subscription => {\n        subscription.cleanup && subscription.cleanup();\n        subscription.cleanup = subscription.callback(current);\n      });\n    };\n\n    callbackRef.subscribe = callback => {\n      const subscription = { callback };\n\n      subscriptions.push(subscription);\n\n      if (subscriptions.length >= SUBSCRIBER_LIMIT) {\n        console.warn(\n          `useSubscribe: Reaching maximum limit of subscribers (${SUBSCRIBER_LIMIT}), please make sure your code did clean up properly.`\n        );\n      }\n\n      subscription.cleanup = callback(callbackRef.current);\n\n      return () => {\n        subscription.cleanup && subscription.cleanup();\n\n        const index = subscriptions.indexOf(subscription);\n\n        ~index && subscriptions.splice(index, 1);\n      };\n    };\n\n    return callbackRef;\n  }, []);\n}\n"]},"metadata":{},"sourceType":"script"}